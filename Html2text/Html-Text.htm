<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0043)http://www.xs4all.nl/~kmachine/html2txt.htm -->
<HTML><HEAD><TITLE>HTML2TEXT v1.51</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<STYLE type=text/css>@import url( gav_style.css );
</STYLE>

<META content="MSHTML 6.00.5730.11" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<H1 class=grey>HTML2TEXT <I>v1.51</I></H1>
<H2>1997-1998 © <BIG>G</BIG>avin <BIG>S</BIG>pearhead</H2></CENTER>
<HR SIZE=2>

<OL type=I><A href="http://www.nedstat.nl/cgi-bin/viewstat?name=HTML2TXT"><IMG 
  height=18 alt="" src="" width=18 border=0> </A>
  <LI>What is it?
  <P>HTML2TEXT is a utility that converts HTML files to plain text. Optionally 
  it also tries to figure out if the HTML file is well-constructed.
  <P>Click <A href="http://home.wanadoo.nl/spearhead/h2t151b.zip">here</A> to 
  download now!
  <P></P>
  <LI>What's the legal stuff?
  <P>All Rights Reserved.
  <P>Permission to use, copy, and distribute this software and its documentation 
  for any purpose and without fee is hereby granted, provided that the above 
  copyright notice appear in all copies and that both that copyright notice and 
  this permission notice appear in supporting documentation, and that the name 
  Gavin Spearhead not be used in advertising or publicity pertaining to 
  distribution of the software without specific, written prior permission.
  <P>
  <CENTER><B>*** DISCLAIMER ***</B></CENTER>
  <P><B>GAVIN SPEARHEAD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
  SHALL GAVIN SPEARHEAD BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
  DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION, ARISING 
  OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</B>
  <P>
  <CENTER><B>***</B></CENTER>
  <P></P>
  <LI>General information
  <P>This documentation is written in HTML format in way that it is readable in 
  a text viewer as good as possible and as long as the HTML format allows it. A 
  to-text-converted version is also included.
  <P>All my documentations are, since about June 1997, written in HTML. Prior to 
  that date they were written in plain text. This means a) that I can put them 
  on the big web, b) they're readable at all time and c) at all machines that 
  have a browser for it and d) they're easily converted to other formats, such 
  as Postscript, Wordperfect and of course plain-text e) I can easily make 
  formatted documentations.
  <P>Any bugs, errors, suggestions, thought, ideas, etc should be sent to the 
  author, these also includes errors in the documentation. Also the existence of 
  not supported HTML-tags or entity sequences can be sent to <A 
  href="http://www.xs4all.nl/~kmachine/maill.htm">the author</A>, along with a 
  description, restrictions and options. No matter how puny or important your 
  help is, I need <B>your</B> help to improve this program. <BR>If you want to 
  become a beta tester of this program contact <A 
  href="mailto:wieger@telekabel.nl">me</A> and I'll send you the details. 
  Unfortunately I cannot give rewards other then gratitude.
  <P>You are encouraged to register this piece of software. This means that you 
  will either receive the latest version when it is released or a note that a 
  new version is released. It also gives me an idea about how many people use 
  this program and how it's spread. The information provided to register will 
  not be used for other purpose then HTML2TEXT and by any other persons other 
  then me.<BR>There are three ways to register: 
  <OL type=i>
    <LI>Start your web-browser and fill in the <A 
    href="http://www.telekabel.nl/~wieger/register.htm">form</A>. 
    <LI>Convert register.htm to a text file, edit it to fill in the entries and 
    email it to me. 
    <LI>Same as above but print it and send it to my postal address. </LI></OL>Be 
  sure to enter the correct email address on the form! If not I might not be 
  able to send you the registration key.
  <P>Note that registration is <B>Free of charge</B>!
  <P>When you're registered you will become a private registration key, so that 
  your name is written when you execute the program instead of Unregistered. 
  However no other function will be available in the registered version. In 
  other words the unregistered version is not crippled This file will be sent 
  via email if possible. This is currently the only way to receive the 
  registration key. When you order (see below) you will automatically be 
  registered and the key can be found on the disk.
  <P></P>
  <LI>Which files are contained in the package?
  <P>
  <TABLE>
    <TBODY>
    <TR>
      <TD>HTML2TXT.EXE
      <TD>The executable. 
    <TR>
      <TD>HTML2TXT.CFG
      <TD>Configuration file with options. 
    <TR>
      <TD>HTML2TXT.INI
      <TD>Ini-file with entity references. 
    <TR>
      <TD>HTML2TXT.HTM
      <TD>Documentation for HTML2TEXT in HTML format. 
    <TR>
      <TD>HTML2TXT.TXT
      <TD>Documentation for HTML2TEXT in plain text format. 
    <TR>
      <TD>REGISTER.HTM
      <TD>Registration form in HTML format. 
    <TR>
      <TD>LONGFILE.BTM
      <TD>4DOS batch file to convert HTML files which does support Windows 95 
        long filenames. </TR></TBODY></TABLE>
  <P>If one of the files is missing, throw the package away and ask the author 
  for a new and complete copy. The address is at the end of the file.
  <P></P>
  <LI>What does it do?
  <P>HTML2TEXT converts HyperText Mark-up Language (HTML) files to plain-text 
  (ASCII) files. The following rules are applies for this: 
  <UL>
    <LI>The title is optionally displayed on the first line of the output file. 
    Optionally the complete filename plus path are written too. 
    <LI>Entity references (&amp;...;) are converted to character sequences 
    according to the input file or pre-programmed characters. 
    <LI>Any tags will perform the task according to the HTML specification as 
    good as possible, note that some tags cannot have any output in plain ASCII 
    text files (eg. blinking, fonts, colours). 
    <LI>Newlines and tabs are converted to spaces and are removed if obsolete, 
    as are spaces. 
    <LI>Lines are written and justified according to settings, lines are wrapped 
    by words when they are too long. Word delimiters are user-definable. 
    <LI>Tables are reformatted and forms are output so that they can be filled 
    in after conversion. The output of forms is highly user-specifiable. 
    <LI>Warnings are generated on ill-constructed tags or entity references. 
    </LI></UL>
  <P></P>
  <LI>How to start it?
  <P>A quick start instruction is to type on the 
  commandline:<BR>&nbsp;&nbsp;HTML2TXT file.htm<BR>This will convert the file 
  "file.htm" to "file.txt".
  <P>The full syntax of HTML2TEXT is:<BR><BR>&nbsp;&nbsp; HTML2TXT 
  &lt;filespecification&gt; @&lt;listfile&gt; &lt;options&gt;
  <P>&lt;Filespecification&gt; is the name of the files to convert, it may 
  include wildcards (* and ?). More than one file specification may appear on 
  the command line. Note that long filenames (Windows 95/NT) are not supported. 
  This means that input filenames have to be of the 8.3 format (Every W95/NT 
  file has a 8.3 filename and optionally a long filename). The output will 
  always be a 8.3 filename. 4DOS users (v5.5+) can use the %@SFN[...] function 
  to get the short filename of a long filename (see 4DOS documentation for 
  details). A 4DOS batch file is also included to perform conversion of files 
  with long filenames, see below. Windows 95 users can drag and drop files to 
  the executable, Windows then uses the short filename anyway.
  <P>@&lt;listfile&gt; is a name of a file that contains the names of files to 
  convert. The &lt;listfile&gt; may not contain wildcards. Each of these 
  filenames must appear on a single line. Empty lines are permitted and files 
  may have leading or trailing whitespace characters. The names of these files 
  have the same restrictions as the files from the &lt;filespecification&gt;. 
  You cannot use options in a listfile.
  <P>&lt;options&gt; can be the following:<BR>
  <TABLE>
    <TBODY>
    <TR>
      <TD>-a- 
      <TD>Do not display text for links. 
    <TR>
      <TD>-A 
      <TD>Do not display links, images and forms 
    <TR>
      <TD>-b- 
      <TD>Do not mark bold text. 
    <TR>
      <TD>-b+ 
      <TD>Mark bold text by embracing it with stars (*). 
    <TR>
      <TD>-b:&lt;chars&gt;
      <TD>Specifies the two characters used to mark bold text. Exactly two 
        characters have to be given. 
    <TR>
      <TD>-B- 
      <TD>Don't print borders for tables. 
    <TR>
      <TD>-B:&lt;num&gt;
      <TD>Use predefined border &lt;num&gt;, where &lt;num&gt; is 
        <OL>
          <LI>7 bit ASCII (using -|+) 
          <LI>Single lines 
          <LI>Double lines 
          <LI>Double horizontal lines and single vertical lines 
          <LI>Single horizontal lines and double vertical lines 
          <LI>Single frame only 
          <LI>Double frame only 
          <LI>Double frame, single cell separators 
          <LI>Single frame, double cell separators </LI></OL>For a graphical 
        example of those tables look at the config file. 
    <TR>
      <TD>-c 
      <TD>Automatically create directory when the specified output path does 
        not exist. 
    <TR>
      <TD>-c- 
      <TD>Ask to create when the specified output path does not exist. 
    <TR>
      <TD>-C:&lt;num&gt;
      <TD>Sets the charset to use. &lt;num&gt; can be any number from 1 to 9. 
        By default one is chosen, except when windows is detected (in enhanced 
        mode, but who cares) then the default is 3. <BR>1 : ASCII (7 bit)<BR>2 : 
        Extended ASCII (8 bit)<BR>3 : Windows ISO 8859/1<BR>4-9: user 
        definable<BR>
    <TR>
      <TD>-D 
      <TD>Show hidden input fields as normal text fields. 
    <TR>
      <TD>-D- 
      <TD>Hide hidden input fields. 
    <TR>
      <TD>-e 
      <TD>Fast conversion. Equals the options I-ha-F-w-t-O-N-<BR>It doesn't 
        always look real nice, but fast it is. 
    <TR>
      <TD>-E- 
      <TD>Do not read the ini file and thus not convert any entity references, 
        except of the form &amp;#nnn; by using nnn as the ASCII value. 
    <TR>
      <TD>-f 
      <TD>Get input from standard input, then read the files specified. Input 
        from standard input will be converted and then output to standard 
        output. 
    <TR>
      <TD>-f- 
      <TD>Only read the files specified. 
    <TR>
      <TD>-F- 
      <TD>Do not display input fields in forms. 
    <TR>
      <TD>-h 
      <TD>Do not display <B>HTML2TEXT</B> messages. (hush) 
    <TR>
      <TD>-h- 
      <TD>Do display <B>HTML2TEXT</B> messages. 
    <TR>
      <TD>-H 
      <TD>Stop after reading &lt;/html&gt;. 
    <TR>
      <TD>-H- 
      <TD>Continue after reading &lt;/html&gt;. 
    <TR>
      <TD>-i- 
      <TD>Do not mark italic text. 
    <TR>
      <TD>-i+ 
      <TD>Mark italic text by embracing it with slashes (/). 
    <TR>
      <TD>-i:&lt;chars&gt;
      <TD>Specifies the two characters used to mark italic text. Exactly two 
        characters have to be given. 
    <TR>
      <TD>-I- 
      <TD>Don't display any text for images. 
    <TR>
      <TD>-l:&lt;chars&gt;
      <TD>Specifies the characters used for list elements of unordered lists. 
        The first is for the type Square, the second for Disc and the third for 
        Circle. None of the three may be omitted. 
    <TR>
      <TD>-L:&lt;char&gt;
      <TD>Specifies the character to use for filling up empty spaces in text 
        fields of forms. 
    <TR>
      <TD>-m 
      <TD>Mark errors in the output file. 
    <TR>
      <TD>-m- 
      <TD>Do not mark errors in the output file. 
    <TR>
      <TD>-N 
      <TD>Display the full path of the converted file in the output. 
    <TR>
      <TD>-N- 
      <TD>Do not display the full path of the converted file in the output. 
    <TR>
      <TD>-o:&lt;char&gt; 
      <TD>Controls the overwriting policy for existing files &lt;char&gt; can 
        be one of the following: 
        <UL>
          <LI>A: Always overwrite 
          <LI>V: Never overwrite 
          <LI>D: Always append </LI></UL>No suffix means that the user will be 
        asked. 
    <TR>
      <TD>-O- 
      <TD>Don't use a log file. 
    <TR>
      <TD>-O+ 
      <TD>Use a log file. If none is specified previously HTML2TXT.LOG will be 
        used. 
    <TR>
      <TD>-O:&lt;File&gt;
      <TD>Use &lt;File&gt; as a log file. 
    <TR>
      <TD>-p:&lt;num&gt;
      <TD>Set the indenting for lists to &lt;num&gt;. 
    <TR>
      <TD>-P- 
      <TD>Do not display a progress indicator 
    <TR>
      <TD>-P+ 
      <TD>Display a progress indicator. In the upper left corner a wheel will 
        be shown 
    <TR>
      <TD>-q 
      <TD>Treat balancing of quotes strictly. 
    <TR>
      <TD>-q- 
      <TD>Treat balancing of quotes relaxed. A '&gt;' always ends a tag. 
    <TR>
      <TD>-r 
      <TD>Print lists of roman type as ordinary numbers. 
    <TR>
      <TD>-r- 
      <TD>Print lists of roman type with roman numerals. 
    <TR>
      <TD>-R 
      <TD>Only display original text in the output.<BR>Equals the options: 
        a-b-F-I-i-N-u-. 
    <TR>
      <TD>-s 
      <TD>Output will be redirected to standard output. 
    <TR>
      <TD>-s- 
      <TD>Files will be used for output, the output filename will be derived 
        from the output path and the filename entered. 
    <TR>
      <TD>-S 
      <TD>Stretch tables to the full width of the page. This looks neat when 
        you've more short tables with similar data. 
    <TR>
      <TD>-S- 
      <TD>Do not stretch tables to the full width of the page. The width of 
        the table is the minimum width required. 
    <TR>
      <TD>-t 
      <TD>Reformat tables. 
    <TR>
      <TD>-t- 
      <TD>Simple table conversion. Just insert a number of spaces between 
        elements. 
    <TR>
      <TD>-T 
      <TD>Display the title in the output file as -= &lt;title&gt; =-. 
    <TR>
      <TD>-T2 
      <TD>The same as -T but omits the -= and =-. 
    <TR>
      <TD>-T- 
      <TD>Do not display any title. 
    <TR>
      <TD>-u- 
      <TD>Do not mark underlined text. 
    <TR>
      <TD>-u+ 
      <TD>Mark underlined text by embracing it with underscores (_). 
    <TR>
      <TD>-u:&lt;chars&gt;
      <TD>Specifies the two characters used to mark underlined text. Exactly 
        two characters have to be given. 
    <TR>
      <TD>-v 
      <TD>Display version info. 
    <TR>
      <TD>-w 
      <TD>Warn for HTML-errors in the source file. 
    <TR>
      <TD>-w- 
      <TD>Do not warn for HTML-errors in the source file. 
    <TR>
      <TD>-W:&lt;num&gt;
      <TD>Set the line length to &lt;num&gt;. Maximum line length is 255. 
    <TR>
      <TD>-W- 
      <TD>No line wrapping will be performed. 
    <TR>
      <TD>-W 
      <TD>Set line length to the screenwidth (usually 80). 
    <TR>
      <TD>-y- 
      <TD>Do not use hyphenation. 
    <TR>
      <TD>-? 
      <TD>Displays short a help. </TR></TBODY></TABLE>
  <P><B>I know the program suffers from creeping featuritis!</B>
  <P><B>WARNING</B><BR>Most options are different from the options of the 
  version before version 1.50 of HTML2TEXT. This was necessary to maintain some 
  logic in the naming of the options, which have increased immensely in number. 
  Otherwise the characters used would be quite cryptic. Please read the section 
  above carefully. And options are now case-sensitive.
  <P>You can concatenate options to save space. Except -O:&lt;File&gt; which 
  must be the last. Better use the config file to set this variable.
  <P>The result file will have the same name as the original file, but with the 
  extension specified in the config-file (default is .txt), unless the original 
  extension was the same as the extension of the output file, then the extension 
  will be `.tx1' (always).
  <P>All messages are written to standard error, unless hush is set. 4DOS users 
  can also redirect standard error or use the Windows clipboard by the device 
  `clip:'.
  <P></P>
  <LI>Can I use another way to specify options?
  <P>Yes, you can. There are two other ways to specify the options. First of all 
  you can use the HTML2TXT.CFG file (see next section). And second you can use 
  the environment variable H2T_SW. You can set all options in this 
  variable.<BR>&nbsp;Eg. set H2T_SW=-b-u-T2<BR>will switch marking of underlined 
  text and bold text off and switch the title to setting 2. The leading `-' can 
  be omitted. 
  <P></P>
  <LI>What do the files HTML2TXT.INI &amp; HTML2TXT.CFG do?
  <P>
  <UL type=disc>
    <LI>HTML2TXT.INI
    <P>This file contains the translation table for ampersand sequences also 
    known as entity references, ie. a sequence of characters of the form: 
    &amp;some_text;. The lines are of following format: 
    <BR>&lt;identifier&gt;="&lt;result&gt;" <BR>Where the &lt;identifier&gt; is 
    the text between the `&amp;' and the `;'. &lt;result&gt; is the text that 
    will replace entity reference. The quotes are optional. The text can contain 
    escape sequences (C-style) of the format \&lt;char&gt; where &lt;char&gt; 
    can be: 
    <UL type=square>
      <LI>s : a space 
      <LI>n : a newline </LI></UL>
    <P>Or of the format \&lt;number&gt; then the character which ASCII value 
    equals &lt;number&gt; is inserted. Every other character is literally 
    insert, including quotes and bashes.
    <P>entity references of the format &amp;#nnn; not specified in the 
    config-file will be converted to the ASCII value nnn, as are entity 
    references of the format &amp;#xnn;, the hexadecimal representation.
    <P></P>
    <LI>HTML2TXT.CFG 
    <P>This file contains the various options that can be set. These are all 
    eloquently commented in the file itself. So take a peek at that file.
    <P>Beware that some options have side effects, eg. turning off line wrapping 
    means also that text will not be centered.
    <P>In both files any line starting with a semicolon (;) is treated as 
    comments and thus ignored. In the config-file lines starting with a double 
    cross (#) are also treated as comments.
    <P>Both files will be sought for in the current directory first and then the 
    directory from where HTML2TEXT was started. Usually these files will be 
    placed in the same directory as HTML2TXT.EXE, a directory in your path. The 
    path to ini-file can also be specified in the config-file, if so it will be 
    sought there first.
    <P></P></LI></UL>
  <LI>What is the order of reading options?
  <P>When HTML2TEXT starts all options are set to the default value. Then the 
  HTML2TXT.CFG file is read. Next the environment variable H2T_SW is read and 
  finally the commandline options are read. This means that any redefining of 
  options will overwrite the previous settings.
  <P></P>
  <LI>Which tags does it recognise?
  <P>
  <TABLE valign="top">
    <TBODY>
    <TR>
      <TH>Tag 
      <TH>What it does in HTML2TEXT 
    <TR>
      <TD>A 
      <TD>Checks optionally link_text or name_text is written<BR>contrary to 
        previous versions, this one always needs a closing tag. 
    <TR>
      <TD>ABBR 
      <TD>Checks. 
    <TR>
      <TD>ADDRESS 
      <TD>See tag: I. 
    <TR>
      <TD>APPLE 
      <TD>Checks, ignores text between &lt;APPLET&gt;&lt;/APPLET&gt;. 
    <TR>
      <TD>AREA 
      <TD>Ignores. 
    <TR>
      <TD>B 
      <TD>Checks, Optionally writes BOLD-token. 
    <TR>
      <TD>BASE 
      <TD>Ignores. 
    <TR>
      <TD>BASEFONT
      <TD>Ignores. 
    <TR>
      <TD>BDO 
      <TD>Checks. 
    <TR>
      <TD>BGSOUND 
      <TD>Ignores. 
    <TR>
      <TD>BIG 
      <TD>Checks. 
    <TR>
      <TD>BLINK 
      <TD>Checks. 
    <TR>
      <TD>BLOCKQUOTE
      <TD>Checks, indents. 
    <TR>
      <TD>BODY 
      <TD>Checks. 
    <TR>
      <TD>BQ 
      <TD>Checks, indents; same as blockquote 
    <TR>
      <TD>BR 
      <TD>Writes a newline. 
    <TR>
      <TD>BUTTON 
      <TD>Writes a button and uses button_text. 
    <TR>
      <TD>CAPTION 
      <TD>Determines a caption for tables, Checks. 
    <TR>
      <TD>COLGROUP
      <TD>Ignores. 
    <TR>
      <TD>CENTER 
      <TD>Checks, centers when linewrap is on. 
    <TR>
      <TD>CITE 
      <TD>see tag: I. 
    <TR>
      <TD>CODE 
      <TD>See tag: Pre. 
    <TR>
      <TD>COL 
      <TD>Checks. 
    <TR>
      <TD>COMMENT 
      <TD>Ignores anything between &lt;COMMENT&gt;&lt;/COMMENT&gt;,. Checks. 
    <TR>
      <TD>DD 
      <TD>Inserts newline and indents. 
    <TR>
      <TD>DEL 
      <TD>Checks. 
    <TR>
      <TD>DFN 
      <TD>See tag: I. 
    <TR>
      <TD>DIR 
      <TD>See tag: OL. 
    <TR>
      <TD>DIV 
      <TD>Checks, writes a newline at both open and close tag. 
    <TR>
      <TD>DL 
      <TD>Starts a definition list, Checks. 
    <TR>
      <TD>DT 
      <TD>Inserts a newline. 
    <TR>
      <TD>EM 
      <TD>see tag: I. 
    <TR>
      <TD>EMBED 
      <TD>Ignores. 
    <TR>
      <TD>FIELDSET
      <TD>Checks. 
    <TR>
      <TD>FRAME 
      <TD>Ignores. 
    <TR>
      <TD>FRAMESET
      <TD>Checks. 
    <TR>
      <TD>FONT 
      <TD>Checks. 
    <TR>
      <TD>FORM 
      <TD>Checks. 
    <TR>
      <TD>H 
      <TD>Checks. 
    <TR>
      <TD>HD1 
      <TD rowSpan=6>Writes the text to screen with embracing newlines. 
    <TR>
      <TD>HD2 
    <TR>
      <TD>HD3 
    <TR>
      <TD>HD4 
    <TR>
      <TD>HD5 
    <TR>
      <TD>HD6 
    <TR>
      <TD>HEAD 
      <TD>Checks. 
    <TR>
      <TD>HR 
      <TD>Writes a line of `='s in case size &gt;3 or else a line of `-'s. The 
        length is absolute or relative set according to the width value. 
    <TR>
      <TD>HTML 
      <TD>Everything after &lt;/HTML&gt; is optionally ignored, Checks. 
    <TR>
      <TD>I 
      <TD>Checks, Optionally writes ITALIC-token. 
    <TR>
      <TD>IFRAME 
      <TD>Checks. 
    <TR>
      <TD>IMG 
      <TD>Ignored, Optionally writes image_text. 
    <TR>
      <TD>INPUT 
      <TD>Ignored. 
    <TR>
      <TD>ISINDEX 
      <TD>Write a prompt plus optionally [ Input ]. 
    <TR>
      <TD>KBD 
      <TD>See B. 
    <TR>
      <TD vAlign=top>LI 
      <TD>Writes a list element identifier, for ULs a * or specified in 
        config-file, for OL a number, parameter type and value used. 
    <TR>
      <TD>LEGEND 
      <TD>Checks. 
    <TR>
      <TD>LINK 
      <TD>Ignores. 
    <TR>
      <TD>LISTING 
      <TD>See tag: Pre. 
    <TR>
      <TD>MAP 
      <TD>Checks. 
    <TR>
      <TD>MARQUEE 
      <TD>Checks. 
    <TR>
      <TD>MENU 
      <TD>See tag: OL. 
    <TR>
      <TD>META 
      <TD>Ignores. 
    <TR>
      <TD>NEXTID 
      <TD>Ignores. 
    <TR>
      <TD>NOBR 
      <TD>Checks. 
    <TR>
      <TD>NOFRAMES
      <TD>Checks. 
    <TR>
      <TD>NOSCRIPT
      <TD>Checks. 
    <TR>
      <TD>OBJECT 
      <TD>Checks. 
    <TR>
      <TD>OL 
      <TD>An ordered list, Checks, type parameter used. 
    <TR>
      <TD>OPTION 
      <TD>Ignores. 
    <TR>
      <TD>OPTGROUP
      <TD>Checks. 
    <TR>
      <TD>P 
      <TD>Starts a new paragraph and adjusts alignment. 
    <TR>
      <TD>PARAM 
      <TD>Ignores. 
    <TR>
      <TD>PRE 
      <TD>Output as is, Checks (line wrap is not ignored, if on). 
    <TR>
      <TD>Q 
      <TD>Checks. 
    <TR>
      <TD>S 
      <TD>see tag: strike. 
    <TR>
      <TD>SAMP 
      <TD>Checks. 
    <TR>
      <TD>SCRIPT 
      <TD>Ignores anything between &lt;SCRIPT&gt;&lt;/SCRIPT&gt;, Checks. 
    <TR>
      <TD>SELECT 
      <TD>Checks. 
    <TR>
      <TD>SMALL 
      <TD>Checks. 
    <TR>
      <TD>SOUND 
      <TD>Ignores. 
    <TR>
      <TD>SPACER 
      <TD>Ignores. 
    <TR>
      <TD>SPAN 
      <TD>Checks. 
    <TR>
      <TD>STRIKE 
      <TD>Checks. 
    <TR>
      <TD>STRONG 
      <TD>See tag: B. 
    <TR>
      <TD>STYLE 
      <TD>This is treated as it were a comment. Technically it sets info on 
        various colours, etc. 
    <TR>
      <TD>SUB 
      <TD>Checks. 
    <TR>
      <TD>SUP 
      <TD>Checks. 
    <TR>
      <TD>TABLE 
      <TD>Checks, starts/finishes a table. 
    <TR>
      <TD>TBODY 
      <TD>Checks. 
    <TR>
      <TD>TD 
      <TD>Defines a table cell. 
    <TR>
      <TD>TEXTAREA
      <TD>Ignores. 
    <TR>
      <TD>TFOOT 
      <TD>Checks. 
    <TR>
      <TD>THEAD 
      <TD>Checks. 
    <TR>
      <TD>TH 
      <TD>Defines a table header cell. 
    <TR>
      <TD>TITLE 
      <TD>Writes the title, if within &lt;HEAD&gt;&lt;/HEAD&gt;, Checks. 
    <TR>
      <TD>TR 
      <TD>Defines a table row. 
    <TR>
      <TD>TT 
      <TD>Checks. 
    <TR>
      <TD>U 
      <TD>Checks. 
    <TR>
      <TD>UL 
      <TD>An unordered list, Checks, type parameter used. 
    <TR>
      <TD>VAR 
      <TD>See tag: Pre. 
    <TR>
      <TD>WBR 
      <TD>Ignores. 
    <TR>
      <TD>!DOCTYPE
      <TD>Ignores. </TR></TBODY></TABLE>
  <P>These are all the tags from the HTML-specification version 4.0. Not all are 
  currently fully implemented although most are. Also included are some browser 
  specific tags, for either Netscape as Microsoft Internet Exploder. The full 
  specification of HTML can be found <A 
  href="http://www.xs4all.nl/~kmachine/www.w3.org">here</A>.
  <P>Here Checks means that for every open tag a matching closing tag is sought. 
  In most cases the order of the closing tags are not relevant, but sometimes 
  the output will be unexpected when tags are closed in the wrong order.
  <P>Here Ignores means that the tag is just ignored, no output is generated and 
  no checks are performed. Mostly these will be tag that set options to the 
  output that have no meaning in plain text files. What would a client side map, 
  for example do in a text file?
  <P>Some tags may have optional closing tags, these are ignored and <B>not</B> 
  checked. Eg. &lt;tr&gt;,&lt;td&gt;,&lt;th&gt;,&lt;p&gt;. Changed from previous 
  versions is that the anchor tag (&lt;a ...&gt;) now always needs a closing 
  tag, although for most name definitions these are usually left out. Some of 
  those tags need a closing tag (preceded by a slash), these will be checked, if 
  the tag was opened before. It will also be checked if those tags are closed in 
  the right order. Furthermore is checked that tags are not nested if not 
  necessary (eg. bold), this might indicate a missing slash in the tag in the 
  second tag. Lots of tags are simply ignored and thus generate no output. Some 
  tags optionally generate output. Any text after &lt;/html&gt; is optionally 
  ignored. Mainly to prevent garbage output. Some tags cause the following text 
  to be ignored until a closing tag appears.
  <P>Unknown tags are ignored and optionally a message is generated.
  <P>Note that this just specifies the actions taken by HTML2TEXT and not what 
  the HTML specification says about tags, however I have tried to implement the 
  tags close to the specification as possible.
  <P>Tables generate the following output. Every table row is written on at 
  least one line, and every row yields a linefeed. Table columns are separated 
  by at least one space or other cell separator. Some options are implemented 
  for tables, but currently do not all work very well, a row can only be 
  affected by at most one rowspan and one colspan. Also text won't be stretched 
  to the full length of cells with rowspans, the cells below will be empty 
  instead. Colspan is currently implemented, the content of the cells will be 
  stretched of the number of columns according to the collspan. Tables are 
  squeezed to a minimum size or strectched to the full width, if linewrap is 
  chosen. Otherwise a cell will be of the length of the longest cell in the 
  column. The squeezing and stretching of cells is done is quite a rough 
  fashion. For long tables check out the config-file to set some parameters so 
  that those are handled well too (who uses tables larger than 256 × 10 with 
  cells of more than 64 KB, however some people build their whole pages in a 
  table...). if <I>you</I> do you will have to increase the max_rows and the 
  max_cols in the config-file. If this is necessary the most likely error 
  messages are error 13 and error 14. Also possible are error 7 and error 12. 
  Except for error 12 these errors are fatal errors. Occasionally this may also 
  lead a situation in which your machine seems not to respond. Too long cells, 
  ie larger than 64k will be truncated.<BR>Nested tables aren't supported 
  either, those will be treated as if the notables option is set to on. Only the 
  outer-table will be formatted.
  <P></P>
  <LI>What does it output?
  <P>HTML2TEXT can have two kinds of output:
  <OL type=1>
    <LI>It can just throw all output to standard output. This means that all 
    files specified are concatenated to stdout. This also means that one can 
    `pipe' or redirect the output directly.
    <P></P>
    <LI>It can create files with extension specified in the config-file (or 
    `tx1' in case the input has that extension). If the output already exists, 
    the user is asked to confirm overwriting of the file.
    <P></P></LI></OL>
  <P>Note that all messages are written to standard error. This is because one 
  needs to make a distinction between the converted text and the additional info 
  output by HTML2TEXT. Thus any messages are written to the screen even if 
  stdout is redirected. Standard error can be redirected as well btw (however 
  command.com does not support it). Also the hush option will prevent output to 
  stderr.
  <P>When the output path specified in the config file does not exist, by 
  default, the user is asked whether the path should be created. When the answer 
  is no or the creation did not succeed the current path is used.
  <P>HTML2TEXT sometimes uses temporary files to store data. These are of the 
  format H2T_xxxx.$$$. where the xxxx stands for a number. Those files can 
  safely be deleted after using HTML2TEXT. Most of the time the program handles 
  that itself. However the files are not deleted on fatal errors or user 
  interruptions.
  <P></P>
  <LI>How does it get input?
  <P>HTML2TEXT can get input from two sources. First it can read files specified 
  on the commandline, wildcards are permitted and from the listfile. Secondly 
  the input can be derived from the console. In other words input can be 
  redirected from standard input. Use the -f option to set redirection on. If no 
  filename is specified, it expects input from standard input too. This means 
  that programmes can `pipe' their output to HTML2TEXT and also input can be 
  redirected from files. Eg. <BR>&nbsp;&nbsp; type myhtml.htm | html2txt 
  -f<BR>This means that type will output the myhtml.htm file to stdout and it 
  will be `piped' to HTML2TXT. Practically this way will have the same effect 
  as<BR>&nbsp; HTML2TXT myhtml.htm -s<BR>The output from redirection from 
  standard input will always be sent to standard output, that means that if it 
  has to be sent to a file, redirection has to be used again. Eg. 
  <BR>&nbsp;&nbsp; type myhtml.htm | html2txt -f &gt; myhtml.txt<BR>Now the 
  output will be written to a file called myhtml.txt.<BR>If files are specified 
  on the command line as well, the output will still depend on the 
  standard_output parameter.<BR>For usage of redirection and `piping' check the 
  manuals of the commandline interpreter (eg. command.com or 4dos.com).
  <P></P>
  <LI>What is printed in the log files?
  <P>The log file contains for each file it converts the full path of the input 
  file and the full path of the output file. In addition to that the date and 
  time will be printed. When standard input or output is used &lt;stdin&gt; and 
  &lt;stdout&gt; will be printed instead. Also it contains all output written to 
  the screen during conversion. However each line will be preceded by two double 
  crosses (`#'). 
  <P></P>
  <LI>Errors and Warnings<BR><B>Errors</B><BR>
  <TABLE>
    <TBODY>
    <TR>
      <TH>Error
      <TH>Error string
      <TH>Description 
    <TR>
      <TD>1
      <TD>Illegal parameter. 
      <TD>A command line parameter was not recognised. 
    <TR>
      <TD>2
      <TD>No such file. 
      <TD>No file was found matching the file name specification. 
    <TR>
      <TD>3
      <TD>No filename specified. 
      <TD>No file specification was found on the command line. 
    <TR>
      <TD>4
      <TD>Config-file not found. 
      <TD>The program could not locate the config-file, which is usually found 
        in the current directory or in the directory containing HTML2TXT.EXE. 
    <TR>
      <TD>5
      <TD>Ini-file not found. 
      <TD>The program could not locate the ini-file (see error 4). 
    <TR>
      <TD>6
      <TD>Error in ini-file. 
      <TD>One entry in the ini-file was not defined. 
    <TR>
      <TD>7
      <TD>Not enough memory. 
      <TD>There was not enough memory to execute the program. 
    <TR>
      <TD>8
      <TD>File could not be opened. 
      <TD>One input file could not be found or opened. 
    <TR>
      <TD>9
      <TD>Error in config-file. 
      <TD>One entry in the config-file was not defined. 
    <TR>
      <TD>10
      <TD>Too many entity references in ini-file. 
      <TD>The ini-file contains too many codes to hold in memory. Increase the 
        value in the config file. 
    <TR>
      <TD>11
      <TD>File skipped. 
      <TD>The file could not be converted. The output file already exists and 
        do not overwrite was chosen. 
    <TR>
      <TD>12
      <TD>Heap corrupted. 
      <TD>Memory is being corrupted during the conversion, mostly of tables. 
    <TR>
      <TD>13
      <TD>Too many rows in table. 
      <TD>The table contains more rows than the program can keep in memory. 
    <TR>
      <TD>14
      <TD>Too many columns in table. 
      <TD>The table contains more columns than the program can keep in memory. 

    <TR>
      <TD>15
      <TD>Specified path is illegal. 
      <TD>The ini-file could not be found in the specified path. 
    <TR>
      <TD>16
      <TD>Could not create temporary file. 
      <TD>There is not enough space on the disk or there are not enough 
        handles to open a temporary file. 
    <TR>
      <TD>17
      <TD>File writing error: Disk full. 
      <TD>An error occurred while writing a file, most like is that the disk 
        is full. </TR></TBODY></TABLE><B>Warnings</B><BR>
  <TABLE>
    <TBODY>
    <TR>
      <TH>Warning
      <TH>Warning String
      <TH>Description 
    <TR>
      <TD>256
      <TD>Unrecognised HTML-code. 
      <TD>The HTML-code was not recognised, probably not defined. 
    <TR>
      <TD>257
      <TD>Ill-constructed HTML-code. 
      <TD>The HTML-code was different from the one expected, probably a 
        closing tag forgotten or a missing `/' in a tag. 
    <TR>
      <TD>258
      <TD>Illegal list item. 
      <TD>The list item or list was of an illegal type. 
    <TR>
      <TD>259
      <TD>Semicolon expected. 
      <TD>The semicolon after an entity reference is missing. However there 
        seems to be some decreasing use of the semicolon. 
    <TR>
      <TD>260
      <TD>Illegal token. 
      <TD>A token was encountered which was not legal in the context. Mostly 
        those will be &gt; or &amp;. 
    <TR>
      <TD>261
      <TD>Ill-constructed entity reference. 
      <TD>The entity reference is not defined in the ini-file. 
    <TR>
      <TD>262
      <TD>Misplaced tag, expected within &lt;head&gt;...&lt;/head&gt;. 
      <TD>The tag appeared outside of the head section, usually this is the 
        title tag. 
    <TR>
      <TD>263
      <TD>HTML-tag starts with space. 
      <TD>The HTML tag starts with a space character. 
    <TR>
      <TD>264
      <TD>Invalid list type. 
      <TD>The type specified for a list item or a list was illegal. 
    <TR>
      <TD>265
      <TD>Unexpected `&gt;' encountered. 
      <TD>A greater-than token was encountered without a matching less than 
        token. 
    <TR>
      <TD>266
      <TD>LI without list. 
      <TD>An LI tag was encountered outside a list section. 
    <TR>
      <TD>267
      <TD>DD without definition list. 
      <TD>An DD tag was encountered outside a definition list. 
    <TR>
      <TD>268
      <TD>DT without definition list. 
      <TD>An DT tag was encountered outside a definition list. 
    <TR>
      <TD>269
      <TD>Tables within tables not supported. 
      <TD>A table section within a table was encountered. 
    <TR>
      <TD>270
      <TD>Table cell truncated. 
      <TD>A table cell contained more than 65K data. 
    <TR>
      <TD>271
      <TD>Output path could not be created, default path used. 
      <TD>The specified output path could not be used or created. Probably one 
        of the directories in the path is a file. </TR></TBODY></TABLE>
  <LI>What does LONGFILE.BTM do?
  <P>LONGFILE.BTM is a simple 4DOS batch file that uses HTML2TEXT to convert 
  HTML-files to TEXT-files. This file will use Windows 95 long filenames. 
  However this batch file has some limitations. 
  <UL>
    <LI>Existing files will always be overwritten. 
    <LI>Extension of the ouput file will always be .txt. 
    <LI>No output to the screen is generated, such as error, warning etc. 
    <LI>It needs 4DOS 6.00 or better to run (maybe 4DOS 5.5 works too). 
  </LI></UL>There is no guarantee or whatsoever that this program will work 
  correctly or even something near that. It has been tested very little and is 
  probably error infested, when using commandline options. Use it at your own 
  reponsibility. Further you are encouraged to improve the working of the batch 
  file and send those versions to me.
  <P><BR>Usage: <BR>&nbsp;&nbsp;LONGFILE.BTM &lt;filespecification&gt;<BR>Where 
  &lt;filespecification&gt; is the name of the file you want to convert. 
  Wildcards are permitted and you can have multiple file specification on a 
line.
  <P>Use this batch file at your own risk! It is not well tested. Future edition 
  will probably have more advanced methods of using W95 long filenames. The 
  source code is included, however, so that one can experiment with it a little.
  <P></P>
  <LI>Why does it output look weird sometimes?
  <P>Some people misuse HTML tags. For example &lt;pre&gt;...&lt;/pre&gt; 
  sections are used to insert newlines in the output. Or tables are used to 
  define the layout of a whole page. In graphical browser, such as Netscape, 
  this may lead to the intended result. However in a text-based system this may 
  lead to large gaps of newlines and empty sections. And of course small columns 
  with useful information.This is not a bug in HTML2TEXT but usually a result of 
  lousy written HTML-codes, since HTML2TEXT tries to conform to the 
  specification as good as possible. Most of the authors of such pages do not 
  even bother to try and understand the HTML specs. 
  <P>Other `weird things' happen when some one writes something similar to the 
  following fragment of HTML-code:<BR>&nbsp;Some text and&lt;b&gt; this 
  &lt;/b&gt;is very important.<BR>This would like like in the out 
  as:<BR>&nbsp;Some text and* this *is very important.<BR>The spaces are at the 
  `wrong' side of `*'. This is just what is done by the program (This probably 
  is what Netscape does too but you cannot see it (or are the spaces slightly 
  wider?)). The spaces are made bold too. Do remember that most tags are not 
  word delimiters. Some are tho treated that way, such as &lt;br&gt; and 
  &lt;p&gt;.
  <P>One final word about weird output. The program does not remove trailing 
  spaces. Mostly this is not necessary. But if it is necessary you'll have to do 
  it yourself. Most good editors however have an option to remove these. Also 
  there are filters enough that can handle it. The reason why the trailing 
  spaces are not removed is that it will degrade performance drastically.
  <P></P>
  <LI>The program works so slow what happened?
  <P>In most cases the program does work quite fast. However on an older machine 
  it may be that it runs quite slow. Mostly this is due to conversion of tables 
  which takes quite some time. Anyway here are some hints to make it run faster 
  (some are quite obvious):<BR>
  <UL>
    <LI>Run the program in DOS not in windoze mode. Especially windoze DOS boxes 
    are terribly slow. Also full screen DOS mode is slower than real DOS mode. 
    <LI>Use diskcaches to speed up reading and writing data. Even though 
    HTML2TEXT uses buffers for reading and writing. 
    <LI>Use a ramdrive for working directory. This will speed up conversion of 
    tables. Be sure however to have enough space free. 
    <LI>Removes any comment or empty lines from both the ini and config files 
    and remove lines that are set to default values from the config file. 
    <LI>Remove any lines of entity references from the ini-file that you will 
    not use. And lines starting with a double cross (`#') that are converted to 
    the ASCII value. 
    <LI>Switch notables on. This converts tables quicker but uglier. 
    <LI>Turn warnings off. This slightly increases speed. 
    <LI>Disable printing of links, anchors, images and input. These can be 
    somewhat time consuming. Since the texts need to be parsed. </LI></UL>
  <LI>What's with those version numbers
  <P>Version numbers are defined into several sections.<BR>In the first place 
  there is a major version number, 1 currently. Which is followed by a dot. Then 
  there is the minor version number, 50 now. The version is followed by a single 
  character. `a' is a alpha release which is never released, only for my usage, 
  lots of new functions have to be implemented or finished still. `b' is the 
  beta release and most likely the normal release, since this version would not 
  change much more, except for some bug fixes. `c' will denote an updated 
  version from the beta release. Then there are internal revision. This number 
  will be increased as changes are implemented each time. Plus a data of last 
  editing will be entered (in Frisian). This date should be the same as the date 
  that your operating system returns.
  <P></P>
  <LI>Problems &amp; Open Issues
  <P>
  <UL>
    <LI>Forms<BR>Forms may look a bit silly when they are wider than the maximum 
    width of a line, especially within tables.
    <P></P>
    <LI>Tables<BR>Tables are reformatted in a rather simplified manner (see 
    above)<BR>Future editions will have improved table processing.<BR>Large 
    tables may produce erroneous output (one cell may not contain more than 65k 
    bytes the rest is truncated). Too many columns in a table will terminate the 
    program.
    <P></P>
    <LI>Too many newline<BR>Some combinations of tags will result in too many 
    newlines. However most of those are fixed now.
    <P></P></LI></UL>
  <LI>How to obtain a new copy of HTML2TEXT?
  <P>There are several ways to obtain a copy of html2text: 
  <OL>
    <LI>Download it here: <A 
    href="http://www.telekabel.nl/~wieger/h2t151b.zip">http://www.telekabel.nl/~wieger/h2t151b.zip</A>
    <P></P>
    <LI>Write an email to me and ask. I will return the latest copy attached to 
    the reply as zipped archive.
    <P></P>
    <LI>Write to my postal address and ask. Be sure to include enough (Dutch! no 
    other currency will be accepted) money to cover the postage. Also include 
    the return address. For Dutch return addresses include a SASE (with enough 
    postage for a diskette). Only 3.5" diskettes will be used.
    <P></P>
    <LI>Look at the nearest BBS or Internet site, for a copy. It is uploaded to 
    Simtel usually.
    <P></P></LI></OL>
  <LI>Is this program ported to other platforms?
  <P>No, not yet. Currently it only works is DOS (3.3 or better). It should work 
  in Windows and OS/2 DOS boxes. It should also work with most DOS emulators on 
  other platforms.
  <P></P>
  <LI>What's left do work out?
  <P>
  <UL>
    <LI>Better table formatting, include options of alignment, rowspan also 
    alignment on caption isn't supported well. 
    <LI>Windows 95 long filenames. 
    <LI>Extend support for character sets. Eg. table borders and char set 1 do 
    not accept non 7 bit ASCII characters. 
    <LI>Ports to other platforms, such as various Unix variants and Macintosh. 
    <LI>Lots of small things </LI></UL>
  <LI>What changes were made?
  <P>
  <TABLE>
    <TBODY>
    <TR>
      <TD vAlign=top>1.51
      <TD>
        <UL>
          <LI>Fixed a bug, when one of the format string was empty, causing to 
          print random data. 
          <LI>Fixed a bug, ignoring the first entity reference, of a certain 
          length. 
          <LI>Fixed a small bug when reading escape character for 
          input_fill_char 
          <LI>Increased customisability for format strings. 
          <LI>Added a few shortcut options. 
          <LI>Added the possibility to feed options through the config file. 
          </LI></UL>
    <TR>
      <TD vAlign=top>1.50
      <TD>
        <UL>
          <LI>Added support for multiple character sets for the entity 
          references. 
          <LI>Redefined options, options are now case-sensitive too. 
          <LI>Optionally get rid of the `-=' and `=-' from the title. 
          <LI>Added customisability of displaying input, image and link tags. 
          <LI>Added possibility to specify an output path. 
          <LI>Added support for single and double quote for string enclosing 
          within tags. 
          <LI>Added many new tags from HTML 4.0 Specification. 
          <LI>Re-wrote the larger part of this documentation. 
          <LI>Fixed a couple of bugs in generating warnings. 
          <LI>Fixed a bug in expanding wildcards. It doesn't expand directories 
          anymore. 
          <LI>Many smaller bugs fixed. 
          <LI>Many small cosmetic changes. 
          <LI>Included LONGFILE.BTM. 
          <LI>Added support for list files. 
          <LI>Now word delimiters besides spaces and tabs and newlines, etc can 
          be defined. 
          <LI>Added borders for tables and implemented the colspan attribute. 
          <LI>The entity references in tag attributes will be converted. 
</LI></UL>
    <TR>
      <TD vAlign=top>1.21.
      <TD>
        <UL>
          <LI>Redirection of input from standard input, is the default when no 
          filename was specified instead of an error. 
          <LI>Added performing of underlines. 
          <LI>fixed a bug in reading a tag. </LI></UL>
    <TR>
      <TD vAlign=top>1.20
      <TD>
        <UL>
          <LI>Bugs fixed and internal revisions. 
          <LI>Table reformatting improved (no more garbage output). 
          <LI>Multiple file specifications on commandline. </LI></UL>
    <TR>
      <TD vAlign=top>1.10
      <TD>
        <UL>
          <LI>Fixed some bugs. 
          <LI>Improved commandline options parsing. </LI></UL>
    <TR>
      <TD vAlign=top>1.02
      <TD>
        <UL>
          <LI>Added formatting of tables. 
          <LI>Better processing of user input (forms). 
          <LI>Line wrapping added internally (WORDWRAP.EXE is not necessary 
          anymore). 
          <LI>Option added to set line wrap. 
          <LI>WORDWRAP package not included anymore. 
          <LI>Amp sequences of the format &amp;#nnn; can now be defined, but can 
          be ignored. 
          <LI>A very nasty bug fixed which corrupted the heap. 
          <LI>HTML warnings optional. 
          <LI>Added and removed commandline options. </LI></UL>
    <TR>
      <TD vAlign=top>1.01
      <TD>
        <UL>
          <LI>Fixed a nasty bug, when outputting to STDOUT, the number of errors 
          was displayed before the last text. 
          <LI>More intelligent algorithm for performing simple text. 
          <LI>Added value and type options to &lt;LI&gt; tag. 
          <LI>Added option for title. 
          <LI>Decreased default value for stack and tag size. 
          <LI>Documentation converted to HTML format.</LI></UL>
    <TR>
      <TD>1.00
      <TD>
        <UL>
          <LI>First version, not released</LI></UL></TR></TBODY></TABLE>
  <P></P>
  <LI>How to reach the author?
  <P>Write email to:<BR><A href="http://www.xs4all.nl/~kmachine/mail.htm">
  <ADDRESS>me</ADDRESS></A>
  <P>Note that previous email address (wieger@epsilon.nl and wieger1@bart.nl and 
  wieger1@noord.bart.nl) are no longer valid.
  <P>This the latest version of this file can be found at <A 
  href="http://www.xs4all.nl/~kmachine/html2txt.htm">http://www.xs4all.nl/~kmachine/html2txt.htm</A>. 
  </P></LI></OL>
<HR SIZE=1>
Note 1: Anywhere I say Netscape, I mean browser ;-)
<P>Greetings,<BR>Gavin<BR></P></BODY></HTML>
