<html>
<head>
<title>HTML2TEXT v1.51</title>
</head>

<body bgcolor=BLACK text=gray alink=gray vlink=gray link=gray>
<basefont size=3>
<center><h1>HTML2TEXT <i>v1.51</i></h1>
<h2>1997-1998 &copy; <big>G</big>avin <big>S</big>pearhead</h2></center>
<hr size=2><ol type=I>
<li>What is it?<p>
HTML2TEXT is a utility that converts HTML files to plain text.
Optionally it also tries to figure out if the HTML file is
well-constructed.<p>

<li>What's the legal stuff?<p>
All Rights Reserved.<p>

Permission to use, copy, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in
supporting documentation, and that the name Gavin Spearhead not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.<p>

<center><b>*** DISCLAIMER ***</b></center><p>

<b>GAVIN SPEARHEAD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL GAVIN SPEARHEAD BE LIABLE FOR ANY
SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</b><p>

<center><b>***</b></center><p>

<li>General information<p>
This documentation is written in HTML format in way that it is
readable in a text viewer as good as possible and as long as the
HTML format allows it. A to-text-converted version is also
included.<p>

All my documentations are, since about June 1997, written in HTML.
Prior to that date they were written in plain text. This means a)
that I can put them on the big web, b) they're readable at all time
and c) at all machines that have a browser for it and d) they're
easily converted to other formats, such as Postscript, Wordperfect
and of course plain-text e) I can easily make formatted
documentations.<p>

Any bugs, errors, suggestions, thought, ideas, etc should be sent to
the author, these also includes errors in the documentation. Also
the existence of not supported HTML-tags or entity sequences can be
sent to <a href="mailto:wieger1@bart.nl">the author</a>, along
with a description, restrictions and options. No matter how puny or
important your help is, I need <B>your</b> help to improve this
program. <br>If you want to become a beta tester of this program
contact <a href="mailto:wieger1@bart.nl">me</a> and I'll send you
the details. Unfortunately I cannot give rewards other then
gratitude.<p>

You are encouraged to register this piece of software. This means
that you will either receive the latest version when it is released
or a note that a new version is released. It also gives me an idea
about how many people use this program and how it's spread. The
information provided to register will not be used for other purpose
then HTML2TEXT and by any other persons other then me.<br>
There are three ways to register:
<ol type=i>
<li>Start your web-browser and fill in the
    <a href=http://www.bart.nl/~wieger1/register.htm>form</a>.
<li>Convert register.htm to a text file, edit it to fill in the
    entries and email it to me.
<li>Same as above but print it and send it to my postal address.
</ol>
Be sure to enter the correct email address on the form! If not I
might not be able to send you the registration key.<p>

Note that registration is <b>Free of charge</b>!<p>
When you're registered you will become a private registration key,
so that your name is written when you execute the program instead of
Unregistered. However no other function will be available in the
registered version. In other words the unregistered version is not
crippled This file will be sent via email if possible. This is
currently the only way to receive the registration key. When you
order (see below) you will automatically be registered and the key
can be found on the disk.<p>

<li>Which files are contained in the package?<p>

<table>
<tr><td>HTML2TXT.EXE<td>The executable.
<tr><td>HTML2TXT.CFG<td>Configuration file with options.
<tr><td>HTML2TXT.INI<td>Ini-file with entity references.
<tr><td>HTML2TXT.HTM<td>Documentation for HTML2TEXT in HTML format.
<tr><td>HTML2TXT.TXT<td>Documentation for HTML2TEXT in plain text format.
<tr><td>REGISTER.HTM<td>Registration form in HTML format.
<tr><td>LONGFILE.BTM<td>4DOS batch file to convert HTML files which does
			support Windows 95 long filenames.
</table><p>

If one of the files is missing, throw the package away and ask the
author for a new and complete copy. The address is at the end of the
file.<p>

<li>What does it do?<p>
HTML2TEXT converts HyperText Mark-up Language (HTML) files to plain-text
(ASCII) files. The following rules are applies for this:
<ul>
<li>The title is optionally displayed on the first line of the output file.
    Optionally the complete filename plus path are written too.
<li>Entity references (&amp;...;) are converted to character sequences
    according to the input file or pre-programmed characters.
<li>Any tags will perform the task according to the HTML specification
    as good as possible, note that some tags cannot have any output in
    plain ASCII text files (eg. blinking, fonts, colours).
<li>Newlines and tabs are converted to spaces and are removed if obsolete, as
    are spaces.
<li>Lines are written and justified according to settings, lines are wrapped
    by words when they are too long. Word delimiters are user-definable.
<li>Tables are reformatted and forms are output so that they can be filled
    in after conversion. The output of forms is highly user-specifiable.
<li>Warnings are generated on ill-constructed tags or entity references.
</ul><p>

<li>How to start it?<p>
A quick start instruction is to type on the commandline:<br>
&nbsp;&nbsp;HTML2TXT file.htm<br>
This will convert the file "file.htm" to "file.txt".<p>

The full syntax of HTML2TEXT is:<br>
<br>&nbsp;&nbsp; HTML2TXT &lt;filespecification&gt;
   @&lt;listfile&gt; &lt;options&gt;<p>

&lt;Filespecification&gt; is the name of the files to convert, it
may include wildcards (* and ?). More than one file specification may
appear on the command line. Note that long filenames (Windows 95/NT)
are not supported. This means that input filenames have to be of the
8.3 format (Every W95/NT file has a 8.3 filename and optionally a
long filename). The output will always be a 8.3 filename. 4DOS users
(v5.5+) can use the %@SFN[...] function to get the short filename of
a long filename (see 4DOS documentation for details). A 4DOS batch
file is also included to perform conversion of files with long
filenames, see below. Windows 95 users can drag and drop files to
the executable, Windows then uses the short filename anyway.<p>

@&lt;listfile&gt; is a name of a file that contains the names of
files to convert. The &lt;listfile&gt; may not contain wildcards.
Each of these filenames must appear on a single line. Empty lines
are permitted and files may have leading or trailing whitespace
characters. The names of these files have the same restrictions as
the files from the &lt;filespecification&gt;. You cannot use options
in a listfile.<p>

&lt;options&gt; can be the following:<br>
<table>
  <tr><td>-a- <td>Do not display text for links.
  <tr><td>-A  <td>Do not display links, images and forms
  <tr><td>-b- <td>Do not mark bold text.
  <tr><td>-b+ <td>Mark bold text by embracing it with stars (*).
  <tr><td>-b:&lt;chars&gt;<td> Specifies the two characters used to mark
  		  bold text. Exactly two characters have to be given.
  <tr><td>-B- <td>Don't print borders for tables.
  <tr><td>-B:&lt;num&gt;<td>Use predefined border &lt;num&gt;, where &lt;num&gt; is
  		  <ol>
		  <li>7 bit ASCII (using -|+)
		  <li>Single lines
		  <li>Double lines
		  <li>Double horizontal lines and single vertical lines
		  <li>Single horizontal lines and double vertical lines
		  <li>Single frame only
		  <li>Double frame only
		  <li>Double frame, single cell separators
		  <li>Single frame, double cell separators
		  </ol>
		  For a graphical example of those tables look at the
		  config file.
  <tr><td>-c  <td>Automatically create directory when the specified
  		  output path does not exist.
  <tr><td>-c- <td>Ask to create when the specified output path does
		  not exist.
  <tr><td>-C:&lt;num&gt;<td>Sets the charset to use. &lt;num&gt; can be any
  		  number from 1 to 9. By default one is chosen, except when
		  windows is detected (in enhanced mode, but who cares) then
		  the default is 3. <br>
		  1   : ASCII (7 bit)<br>
		  2   : Extended ASCII (8 bit)<br>
		  3   : Windows ISO 8859/1<br>
		  4-9: user definable<br>
  <tr><td>-D  <td>Show hidden input fields as normal text fields.
  <tr><td>-D- <td>Hide hidden input fields.
  <tr><td>-e  <td>Fast conversion. Equals the options I-ha-F-w-t-O-N-<br>
  		  It doesn't always look real nice, but fast it is.
  <tr><td>-E- <td>Do not read the ini file and thus not convert any
  		  entity references, except of the form &#nnn; by using
		  nnn as the ASCII value.
  <tr><td>-f  <td>Get input from standard input, then read the files
		  specified. Input from standard input will be
  		  converted and then output to standard output.
  <tr><td>-f- <td>Only read the files specified.
  <tr><td>-F- <td>Do not display input fields in forms.
  <tr><td>-h  <td>Do not display <b>HTML2TEXT</b> messages. (hush)
  <tr><td>-h- <td>Do display <b>HTML2TEXT</b> messages.
  <tr><td>-H  <td>Stop after reading &lt;/html&gt;.
  <tr><td>-H- <td>Continue after reading &lt;/html&gt;.
  <tr><td>-i- <td>Do not mark italic text.
  <tr><td>-i+ <td>Mark italic text by embracing it with slashes (/).
  <tr><td>-i:&lt;chars&gt;<td> Specifies the two characters used to mark
  		  italic text. Exactly two characters have to be given.
  <tr><td>-I- <td>Don't display any text for images.
  <tr><td>-l:&lt;chars&gt;<td>Specifies the characters used for list
    		  elements of unordered lists. The first is for the type
		  Square, the second for Disc and the third for Circle.
		  None of the three may be omitted.
  <tr><td>-L:&lt;char&gt;<td>Specifies the character to use for filling up
  		  empty spaces in text fields of forms.
  <tr><td>-m  <td>Mark errors in the output file.
  <tr><td>-m- <td>Do not mark errors in the output file.
  <tr><td>-N  <td>Display the full path of the converted file in the output.
  <tr><td>-N- <td>Do not display the full path of the converted file in the
                  output.
  <tr><td>-o:&lt;char&gt;  <td>Controls the overwriting policy for existing files
		  &lt;char&gt; can be one of the following:
		   <ul><li>A: Always overwrite
		       <li>V: Never overwrite
		       <li>D: Always append
		   </ul>
		  No suffix means that the user will be asked.
  <tr><td>-O- <td>Don't use a log file.
  <tr><td>-O+ <td>Use a log file. If none is specified previously HTML2TXT.LOG
  		  will be used.
  <tr><td>-O:&lt;File&gt;<td>Use &lt;File&gt; as a log file.
  <tr><td>-p:&lt;num&gt;<td>Set the indenting for lists to &lt;num&gt;.
  <tr><td>-P- <td>Do not display a progress indicator
  <tr><td>-P+ <td>Display a progress indicator. In the upper left corner
  		  a wheel will be shown
  <tr><td>-q  <td>Treat balancing of quotes strictly.
  <tr><td>-q- <td>Treat balancing of quotes relaxed. A '&gt;' always ends a tag.
  <tr><td>-r  <td>Print lists of roman type as ordinary numbers.
  <tr><td>-r- <td>Print lists of roman type with roman numerals.
  <tr><td>-R  <td>Only display original text in the output.<br>
  		  Equals the options: a-b-F-I-i-N-u-.
  <tr><td>-s  <td>Output will be redirected to standard output.
  <tr><td>-s- <td>Files will be used for output, the output filename will
  		  be derived from the output path and the filename entered.
  <tr><td>-S  <td>Stretch tables to the full width of the page. This looks
  		  neat when you've more short tables with similar data.
  <tr><td>-S- <td>Do not stretch tables to the full width of the page. The
  		  width of the table is the minimum width required.
  <tr><td>-t  <td>Reformat tables.
  <tr><td>-t- <td>Simple table conversion. Just insert a number of
  		  spaces between elements.
  <tr><td>-T  <td>Display the title in the output file as -= &lt;title&gt; =-.
  <tr><td>-T2 <td>The same as -T but omits the -= and =-.
  <tr><td>-T- <td>Do not display any title.
  <tr><td>-u- <td>Do not mark underlined text.
  <tr><td>-u+ <td>Mark underlined text by embracing it with underscores (_).
  <tr><td>-u:&lt;chars&gt;<td> Specifies the two characters used to mark
  		  underlined text. Exactly two characters have to be given.
  <tr><td>-v  <td>Display version info.
  <tr><td>-w  <td>Warn for HTML-errors in the source file.
  <tr><td>-w- <td>Do not warn for HTML-errors in the source file.
  <tr><td>-W:&lt;num&gt;<td>Set the line length to &lt;num&gt;.	Maximum line
  		  length is 255.
  <tr><td>-W- <td>No line wrapping will be performed.
  <tr><td>-W  <td>Set line length to the screenwidth (usually 80).
  <tr><td>-y- <td>Do not use hyphenation.
  <tr><td>-?  <td>Displays short a help.
</table><p>
<b>I know the program suffers from creeping featuritis!</b><p>
<b>WARNING</b><br>

Most options are different from the options of the version before
version 1.50 of HTML2TEXT. This was necessary to maintain some logic
in the naming of the options, which have increased immensely in
number. Otherwise the characters used would be quite cryptic. Please
read the section above carefully. And options are now
case-sensitive.<p>

You can concatenate options to save space. Except -O:&lt;File&gt; which
must be the last. Better use the config file to set this variable.<p>

The result file will have the same name as the original file, but
with the extension specified in the config-file (default is .txt),
unless the original extension was the same as the extension of the
output file, then the extension will be `.tx1' (always).<p>

All messages are written to standard error, unless hush is set. 4DOS
users can also redirect standard error or use the Windows clipboard
by the device `clip:'.<p>

<li>Can I use another way to specify options?<p>
Yes, you can. There are two other ways to specify the options. First
of all you can use the HTML2TXT.CFG file (see next section). And
second you can use the environment variable H2T_SW. You can set all
options in this variable.<br>
&nbsp;Eg. set H2T_SW=-b-u-T2<br>
will switch marking of underlined text and bold text off and switch
the title to setting 2. The leading `-' can be omitted. <p>

<li>What do the files HTML2TXT.INI &amp; HTML2TXT.CFG do?<p>
<ul type=disc> <li>HTML2TXT.INI<p>

 This file contains the translation table for ampersand sequences
 also known as entity references, ie. a sequence of characters of
 the form: &amp;some_text;. The lines are of following format:
 <br>&lt;identifier&gt;=&quot;&lt;result&gt;&quot;
 <br>Where the &lt;identifier&gt; is the text between the `&amp;'
 and the `;'. &lt;result&gt; is the text that will replace entity
 reference. The quotes are optional. The text can contain escape
 sequences (C-style) of the format \&lt;char&gt; where &lt;char&gt;
 can be: <ul type=square>
  <li>s  : a space
  <li>n  : a newline
 </ul><p>
 Or of the format \&lt;number&gt; then the character which ASCII
 value equals &lt;number&gt; is inserted. Every other character is
 literally insert, including quotes and bashes.<p> entity references
 of the format &amp;#nnn; not specified in the config-file will be
 converted to the ASCII value nnn, as are entity references of the
 format &amp;#xnn;, the hexadecimal representation.<p>

 <li>HTML2TXT.CFG <p>
 This file contains the various options that can be set. These are
 all eloquently commented in the file itself. So take a peek at that
 file.<p>

 Beware that some options have side effects, eg. turning off line
 wrapping means also that text will not be centered.<p>

 In both files any line starting with a semicolon (;) is treated as
 comments and thus ignored. In the config-file lines starting with a
 double cross (#) are also treated as comments.<p>

 Both files will be sought for in the current directory first and
 then the directory from where HTML2TEXT was started. Usually these
 files will be placed in the same directory as HTML2TXT.EXE, a
 directory in your path. The path to ini-file can also be specified
 in the config-file, if so it will be sought there first.<p>
 </ul>

<li>What is the order of reading options?<p>
When HTML2TEXT starts all options are set to the default value. Then
the HTML2TXT.CFG file is read. Next the environment variable H2T_SW
is read and finally the commandline options are read. This means
that any redefining of options will overwrite the previous settings.<p>

<li>Which tags does it recognise?<p>
<table valign=top>
<tr><th>Tag     <th>What it does in HTML2TEXT
<tr><td>A       <td>Checks optionally link_text or name_text is written<br>
		    contrary to previous versions, this one always needs a
		    closing tag.
<tr><td>ABBR    <td>Checks.
<tr><td>ADDRESS <td>See tag: I.
<tr><td>APPLE  <td>Checks, ignores text between &lt;APPLET&gt;&lt;/APPLET&gt;.
<tr><td>AREA    <td>Ignores.
<tr><td>B    	<td>Checks, Optionally writes BOLD-token.
<tr><td>BASE    <td>Ignores.
<tr><td>BASEFONT<td>Ignores.
<tr><td>BDO     <td>Checks.
<tr><td>BGSOUND	<td>Ignores.
<tr><td>BIG     <td>Checks.
<tr><td>BLINK   <td>Checks.
<tr><td>BLOCKQUOTE<td>Checks, indents.
<tr><td>BODY    <td>Checks.
<tr><td>BQ	<td>Checks, indents; same as blockquote
<tr><td>BR      <td>Writes a newline.
<tr><td>BUTTON	<td>Writes a button and uses button_text.
<tr><td>CAPTION <td>Determines a caption for tables, Checks.
<tr><td>COLGROUP<td>Ignores.
<tr><td>CENTER  <td>Checks, centers when linewrap is on.
<tr><td>CITE    <td>see tag: I.
<tr><td>CODE    <td>See tag: Pre.
<tr><td>COL	<td>Checks.
<tr><td>COMMENT	<td>Ignores anything between &lt;COMMENT&gt;&lt;/COMMENT&gt;,.
		    Checks.
<tr><td>DD      <td>Inserts newline and indents.
<tr><td>DEL	<td>Checks.
<tr><td>DFN     <td>See tag: I.
<tr><td>DIR     <td>See tag: OL.
<tr><td>DIV     <td>Checks, writes a newline at both open and close tag.
<tr><td>DL      <td>Starts a definition list, Checks.
<tr><td>DT      <td>Inserts a newline.
<tr><td>EM      <td>see tag: I.
<tr><td>EMBED   <td>Ignores.
<tr><td>FIELDSET<td>Checks.
<tr><td>FRAME   <td>Ignores.
<tr><td>FRAMESET<td>Checks.
<tr><td>FONT    <td>Checks.
<tr><td>FORM    <td>Checks.
<tr><td>H       <td>Checks.
<tr><td>HD1     <td rowspan=6>Writes the text to screen with embracing newlines.
<tr><td>HD2
<tr><td>HD3
<tr><td>HD4
<tr><td>HD5
<tr><td>HD6
<tr><td>HEAD    <td>Checks.
<tr><td>HR      <td>Writes a line of `='s in case size &gt;3 or else a line of
                    `-'s. The length is absolute or relative set according to
                    the width value.
<tr><td>HTML    <td>Everything after &lt;/HTML&gt; is optionally ignored, Checks.
<tr><td>I       <td>Checks, Optionally writes ITALIC-token.
<tr><td>IFRAME  <td>Checks.
<tr><td>IMG     <td>Ignored, Optionally writes image_text.
<tr><td>INPUT	<td>Ignored.
<tr><td>ISINDEX <td>Write a prompt plus optionally [ Input ].
<tr><td>KBD     <td>See B.
<tr><td valign=top>LI <td>Writes a list element identifier, for ULs a *
		      	  or specified in config-file, for OL a
		      	  number, parameter type and value used.
<tr><td>LEGEND  <td>Checks.
<tr><td>LINK    <td>Ignores.
<tr><td>LISTING	<td>See tag: Pre.
<tr><td>MAP     <td>Checks.
<tr><td>MARQUEE <td>Checks.
<tr><td>MENU    <td>See tag: OL.
<tr><td>META    <td>Ignores.
<tr><td>NEXTID  <td>Ignores.
<tr><td>NOBR    <td>Checks.
<tr><td>NOFRAMES<td>Checks.
<tr><td>NOSCRIPT<td>Checks.
<tr><td>OBJECT  <td>Checks.
<tr><td>OL      <td>An ordered list, Checks, type parameter used.
<tr><td>OPTION  <td>Ignores.
<tr><td>OPTGROUP<td>Checks.
<tr><td>P       <td>Starts a new paragraph and adjusts alignment.
<tr><td>PARAM   <td>Ignores.
<tr><td>PRE     <td>Output as is, Checks (line wrap is not ignored, if on).
<tr><td>Q	<td>Checks.
<tr><td>S       <td>see tag: strike.
<tr><td>SAMP    <td>Checks.
<tr><td>SCRIPT  <td>Ignores anything between &lt;SCRIPT&gt;&lt;/SCRIPT&gt;, Checks.
<tr><td>SELECT  <td>Checks.
<tr><td>SMALL   <td>Checks.
<tr><td>SOUND   <td>Ignores.
<tr><td>SPACER  <td>Ignores.
<tr><td>SPAN	<td>Checks.
<tr><td>STRIKE  <td>Checks.
<tr><td>STRONG  <td>See tag: B.
<tr><td>STYLE   <td>This is treated as it were a comment. Technically it sets
		    info on various colours, etc.
<tr><td>SUB     <td>Checks.
<tr><td>SUP     <td>Checks.
<tr><td>TABLE   <td>Checks, starts/finishes a table.
<tr><td>TBODY   <td>Checks.
<tr><td>TD      <td>Defines a table cell.
<tr><td>TEXTAREA<td>Ignores.
<tr><td>TFOOT   <td>Checks.
<tr><td>THEAD   <td>Checks.
<tr><td>TH      <td>Defines a table header cell.
<tr><td>TITLE   <td>Writes the title, if within &lt;HEAD&gt;&lt;/HEAD&gt;, Checks.
<tr><td>TR      <td>Defines a table row.
<tr><td>TT      <td>Checks.
<tr><td>U       <td>Checks.
<tr><td>UL      <td>An unordered list, Checks, type parameter used.
<tr><td>VAR     <td>See tag: Pre.
<tr><td>WBR     <td>Ignores.
<tr><td>!DOCTYPE<td>Ignores.
</table><p>
These are all the tags from the HTML-specification version 4.0. Not
all are currently fully implemented although most are. Also included
are some browser specific tags, for either Netscape as Microsoft
Internet Exploder. The full specification of HTML can be found <a
href="www.w3.org">here</a>.<p>

Here Checks means that for every open tag a matching closing tag is
sought. In most cases the order of the closing tags are not
relevant, but sometimes the output will be unexpected when tags are
closed in the wrong order.<p>

Here Ignores means that the tag is just ignored, no output is
generated and no checks are performed. Mostly these will be tag that
set options to the output that have no meaning in plain text files.
What would a client side map, for example do in a text file?<p>

Some tags may have optional closing tags, these are ignored and
<b>not</b> checked. Eg. &lt;tr&gt;,&lt;td&gt;,&lt;th&gt;,&lt;p&gt;.
Changed from previous versions is that the anchor tag (&lt;a
...&gt;) now always needs a closing tag, although for most name
definitions these are usually left out.

Some of those tags need a closing tag (preceded by a slash), these
will be checked, if the tag was opened before. It will also be
checked if those tags are closed in the right order. Furthermore is
checked that tags are not nested if not necessary (eg. bold), this
might indicate a missing slash in the tag in the second tag. Lots of
tags are simply ignored and thus generate no output. Some tags
optionally generate output. Any text after &lt;/html&gt; is
optionally ignored. Mainly to prevent garbage output. Some tags
cause the following text to be ignored until a closing tag
appears.<p>

Unknown tags are ignored and optionally a message is generated.<p>

Note that this just specifies the actions taken by HTML2TEXT and not
what the HTML specification says about tags, however I have tried to
implement the tags close to the specification as possible.<p>

Tables generate the following output. Every table row is written on
at least one line, and every row yields a linefeed. Table columns
are separated by at least one space or other cell separator. Some
options are implemented for tables, but currently do not all work
very well, a row can only be affected by at most one rowspan and one
colspan. Also text won't be stretched to the full length of cells
with rowspans, the cells below will be empty instead. Colspan is
currently implemented, the content of the cells will be stretched of
the number of columns according to the collspan. Tables are squeezed
to a minimum size or strectched to the full width, if linewrap is
chosen. Otherwise a cell will be of the length of the longest cell
in the column. The squeezing and stretching of cells is done is
quite a rough fashion.

For long tables check out the config-file to set some parameters so
that those are handled well too (who uses tables larger than 256
&times; 10 with cells of more than 64 KB, however some people build
their whole pages in a table...). if <i>you</i> do you will have to
increase the max_rows and the max_cols in the config-file. If this
is necessary the most likely error messages are error 13 and error
14. Also possible are error 7 and error 12. Except for error 12
these errors are fatal errors. Occasionally this may also lead a
situation in which your machine seems not to respond. Too long
cells, ie larger than 64k will be truncated.<br>
Nested tables aren't supported either, those will be treated as if
the notables option is set to on. Only the outer-table will be
formatted.<p>

<li>What does it output?<p>

HTML2TEXT can have two kinds of output:<ol type=1>
<li>It can just throw all output to standard output. This means that
   all files specified are concatenated to stdout. This also means
   that one can `pipe' or redirect the output directly.<p>

<li>It can create files with extension specified in the config-file
   (or `tx1' in case the input has that extension). If the output
   already exists, the user is asked to confirm overwriting of the
   file.<p>
</ol><p>
Note that all messages are written to standard error. This is
because one needs to make a distinction between the converted text
and the additional info output by HTML2TEXT. Thus any messages
are written to the screen even if stdout is redirected. Standard
error can be redirected as well btw (however command.com does not
support it). Also the hush option will prevent output to stderr.<p>

When the output path specified in the config file does not exist, by
default, the user is asked whether the path should be created. When
the answer is no or the creation did not succeed the current path is
used.<p>

HTML2TEXT sometimes uses temporary files to store data. These are of
the format H2T_xxxx.$$$. where the xxxx stands for a number. Those
files can safely be deleted after using HTML2TEXT. Most of the time
the program handles that itself. However the files are not deleted
on fatal errors or user interruptions.<p>

<li>How does it get input?<p>
HTML2TEXT can get input from two sources. First it can read files
specified on the commandline, wildcards are permitted and from the
listfile. Secondly the input can be derived from the console. In
other words input can be redirected from standard input. Use the -f
option to set redirection on. If no filename is specified, it
expects input from standard input too. This means that programmes
can `pipe' their output to HTML2TEXT and also input can be
redirected from files.  Eg.
<br> &nbsp;&nbsp; type myhtml.htm | html2txt -f<br>
This means that type will output the myhtml.htm file to stdout and
it will be `piped' to HTML2TXT. Practically this way will have the
same effect as<br>&nbsp; HTML2TXT myhtml.htm -s<br>
The output from redirection from standard input will always be sent
to standard output, that means that if it has to be sent to a file,
redirection has to be used again. Eg.
 <br> &nbsp;&nbsp; type myhtml.htm | html2txt -f &gt; myhtml.txt<br>
Now the output will be written to a file called myhtml.txt.<br>
If files are specified on the command line as well, the output will
still depend on the standard_output parameter.<br>

For usage of redirection and `piping' check the manuals of the
commandline interpreter (eg. command.com or 4dos.com).<p>

<li>What is printed in the log files?<p>
The log file contains for each file it converts the full path of the
input file and the full path of the output file. In addition to that
the date and time will be printed. When standard input or output is
used &lt;stdin&gt; and &lt;stdout&gt; will be printed instead. Also
it contains all output written to the screen during conversion.
However each line will be preceded by two double crosses (`#'). <p>

<li>Errors and Warnings<br>

<B>Errors</b><br>
<table>
<tr><th>Error<th>Error string<th>Description
<tr><td>1<td>Illegal parameter.
	 <td>A command line parameter was not recognised.
<tr><td>2<td>No such file.
         <td>No file was found matching the file name specification.
<tr><td>3<td>No filename specified.
         <td>No file specification was found on the command line.
<tr><td>4<td>Config-file not found.
         <td>The program could not locate the config-file, which is usually
             found in the current directory or in the directory containing
             HTML2TXT.EXE.
<tr><td>5<td>Ini-file not found.
         <td>The program could not locate the ini-file (see error 4).
<tr><td>6<td>Error in ini-file.
         <td>One entry in the ini-file was not defined.
<tr><td>7<td>Not enough memory.
         <td>There was not enough memory to execute the program.
<tr><td>8<td>File could not be opened.
         <td>One input file could not be found or opened.
<tr><td>9<td>Error in config-file.
         <td>One entry in the config-file was not defined.
<tr><td>10<td>Too many entity references in ini-file.
          <td>The ini-file contains too many codes to hold in memory. Increase
		      the value in the config file.
<tr><td>11<td>File skipped.
          <td>The file could not be converted. The output file already exists
		  	  and do not overwrite was chosen.
<tr><td>12<td>Heap corrupted.
          <td>Memory is being corrupted during the conversion, mostly of tables.
<tr><td>13<td>Too many rows in table.
          <td>The table contains more rows than the program can keep in memory.
<tr><td>14<td>Too many columns in table.
          <td>The table contains more columns than the program can keep in
               memory.
<tr><td>15<td>Specified path is illegal.
          <td>The ini-file could not be found in the specified path.
<tr><td>16<td>Could not create temporary file.
          <td>There is not enough space on the disk or there are not enough
              handles to open a temporary file.
<tr><td>17<td>File writing error: Disk full.
          <td>An error occurred while writing a file, most like is that the
              disk is full.
</table>
<b>Warnings</b><br>
<table>
<tr><th>Warning<th>Warning String<th>Description
<tr><td>256<td>Unrecognised HTML-code.
	   <td>The HTML-code was not recognised, probably not defined.
<tr><td>257<td>Ill-constructed HTML-code.
	   <td>The HTML-code was different from the one expected, probably a
   	   closing tag forgotten or a missing `/' in a tag.
<tr><td>258<td>Illegal list item.
	   <td>The list item or list was of an illegal type.
<tr><td>259<td>Semicolon expected.
	   <td>The semicolon after an entity reference is missing. However
   	   there seems to be some decreasing use of the semicolon.
<tr><td>260<td>Illegal token.
	   <td>A token was encountered which was not legal in the context.
   	   Mostly those will be &gt; or &amp;.
<tr><td>261<td>Ill-constructed entity reference.
           <td>The entity reference is not defined in the ini-file.
<tr><td>262<td>Misplaced tag, expected within &lt;head&gt;...&lt;/head&gt;.
           <td>The tag appeared outside of the head section, usually this is
       	   the title tag.
<tr><td>263<td>HTML-tag starts with space.
           <td>The HTML tag starts with a space character.
<tr><td>264<td>Invalid list type.
           <td>The type specified for a list item or a list was illegal.
<tr><td>265<td>Unexpected `&gt;' encountered.
           <td>A greater-than token was encountered without a matching less
       	   than token.
<tr><td>266<td>LI without list.
           <td>An LI tag was encountered outside a list section.
<tr><td>267<td>DD without definition list.
           <td>An DD tag was encountered outside a definition list.
<tr><td>268<td>DT without definition list.
           <td>An DT tag was encountered outside a definition list.
<tr><td>269<td>Tables within tables not supported.
           <td>A table section within a table was encountered.
<tr><td>270<td>Table cell truncated.
           <td>A table cell contained more than 65K data.
<tr><td>271<td>Output path could not be created, default path used.
           <td>The specified output path could not be used or created.
           	   Probably one of the directories in the path is a file.
</table>

<li>What does LONGFILE.BTM do?<p>
LONGFILE.BTM is a simple 4DOS batch file that uses HTML2TEXT to
convert HTML-files to TEXT-files. This file will use Windows 95 long
filenames. However this batch file has some limitations.
<ul>
<li>Existing files will always be overwritten.
<li>Extension of the ouput file will always be .txt.
<li>No output to the screen is generated, such as error, warning etc.
<li>It needs 4DOS 6.00 or better to run (maybe 4DOS 5.5 works too).
</ul>
There is no guarantee or whatsoever that this program will work
correctly or even something near that. It has been tested very
little and is probably error infested, when using commandline
options. Use it at your own reponsibility. Further you are
encouraged to improve the working of the batch file and send those
versions to me.<p>

<br>Usage: <BR>
&nbsp;&nbsp;LONGFILE.BTM &lt;filespecification&gt;<br>
Where &lt;filespecification&gt; is the name of the file you want to
convert. Wildcards are permitted and you can have multiple file
specification on a line.<p>

Use this batch file at your own risk! It is not well tested. Future
edition will probably have more advanced methods of using W95 long
filenames. The source code is included, however, so that one can
experiment with it a little.<p>

<li>Why does it output look weird sometimes?<p>
Some people misuse HTML tags. For example &lt;pre&gt;...&lt;/pre&gt;
sections are used to insert newlines in the output. Or tables are
used to define the layout of a whole page. In graphical browser,
such as Netscape, this may lead to the intended result. However in a
text-based system this may lead to large gaps of newlines and empty
sections. And of course small columns with useful information.This
is not a bug in HTML2TEXT but usually a result of lousy written
HTML-codes, since HTML2TEXT tries to conform to the specification as
good as possible. Most of the authors of such pages do not even bother
to try and understand the HTML specs.
<p>
Other `weird things' happen when some one writes something similar
to the following fragment of HTML-code:<br>
&nbsp;Some text and&lt;b&gt; this &lt;/b&gt;is very important.<br>
This would like like in the out as:<br>
&nbsp;Some text and* this *is very important.<br>
The spaces are at the `wrong' side of `*'. This is just what is done
by the program (This probably is what Netscape does too but you
cannot see it (or are the spaces slightly wider?)). The spaces are
made bold too. Do remember that most tags are not word delimiters.
Some are tho treated that way, such as &lt;br&gt; and &lt;p&gt;.<p>

One final word about weird output. The program does not remove
trailing spaces. Mostly this is not necessary. But if it is
necessary you'll have to do it yourself. Most good editors however
have an option to remove these. Also there are filters enough that
can handle it. The reason why the trailing spaces are not removed is
that it will degrade performance drastically.<p>

<li>The program works so slow what happened?<p>
In most cases the program does work quite fast. However on an older
machine it may be that it runs quite slow. Mostly this is due to
conversion of tables which takes quite some time. Anyway here are
some hints to make it run faster (some are quite obvious):<br>
<ul>
<li>Run the program in DOS not in windoze mode. Especially windoze
DOS boxes are terribly slow. Also full screen DOS mode is slower
than real DOS mode.
<li>Use diskcaches to speed up reading and writing data. Even though
HTML2TEXT uses buffers for reading and writing.
<li>Use a ramdrive for working directory. This will speed up
conversion of tables. Be sure however to have enough space free.
<li>Removes any comment or empty lines from both the ini and config
files and remove lines that are set to default values from the
config file.
<li>Remove any lines of entity references from the ini-file that you
will not use. And lines starting with a double cross (`#') that are
converted to the ASCII value.
<li>Switch notables on. This converts tables quicker but uglier.
<li>Turn warnings off. This slightly increases speed.
<li>Disable printing of links, anchors, images and input. These can
be somewhat time consuming. Since the texts need to be parsed.
</ul>

<li>What's with those version numbers<p>
Version numbers are defined into several sections.<br>
In the first place there is a major version number, 1 currently.
Which is followed by a dot. Then there is the minor version number,
50 now. The version is followed by a single character. `a' is a
alpha release which is never released, only for my usage, lots of
new functions have to be implemented or finished still. `b' is the
beta release and most likely the normal release, since this version
would not change much more, except for some bug fixes. `c' will
denote an updated version from the beta release. Then there are
internal revision. This number will be increased as changes are
implemented each time. Plus a data of last editing will be entered
(in Frisian). This date should be the same as the date that your
operating system returns.<p>

<li>Problems &amp; Open Issues<p>

<ul>
<li>Forms<br>
Forms may look a bit silly when they are wider than the maximum
width of a line, especially within tables.<p>

<li>Tables<br>
Tables are reformatted in a rather simplified manner (see above)<br>
Future editions will have improved table processing.<br> Large
tables may produce erroneous output (one cell may not contain more
than 65k bytes the rest is truncated). Too many columns in a table
will terminate the program.<p>

<li>Too many newline<br>
Some combinations of tags will result in too many newlines. However
most of those are fixed now.<p>
</ul>

<li>How to obtain a new copy of HTML2TEXT?<p>

There are several ways to obtain a copy of html2text:
<ol>
<li>Download it here: <a href="http://www.noord.bart.nl/~wieger1/h2t150b.zip">
    http://www.noord.bart.nl/~wieger1/h2t150b.zip</a><p>

<li>Write an email to me and ask. I will return the latest copy
    attached to the reply as zipped archive.<p>

<li>Write to my postal address and ask. Be sure to include enough
    (Dutch! no other currency will be accepted) money to cover the
    postage. Also include the return address. For Dutch return
    addresses include a SASE (with enough postage for a diskette).
    Only 3.5" diskettes will be used.<p>

<li>Look at the nearest BBS or Internet site, for a copy. It is uploaded to
    Simtel usually.<p>
</ol>

<li>Is this program ported to other platforms?<p>
No, not yet. Currently it only works is DOS (3.3 or better). It should work
in Windows and OS/2 DOS boxes. It should also work with most DOS emulators
on other platforms.<p>

<li>What's left do work out?<p>

<ul>
<li>Better table formatting, include options of alignment, rowspan
    also alignment on caption isn't supported well.
<li>Windows 95 long filenames.
<li>Extend support for character sets. Eg. table borders and char set 1
    do not accept non 7 bit ASCII characters.
<li>Ports to other platforms, such as various Unix variants and Macintosh.
<li>Lots of small things
</ul>

<li>What changes were made?<p>

<table>
<tr><td valign=top>1.51<td><ul>
<li>Fixed a bug, when one of the format string was empty, causing to print
    random data.
<li>Fixed a bug, ignoring the first entity reference, of a certain length.
<li>Fixed a small bug when reading escape character for input_fill_char
<li>Increased customisability for format strings.
<li>Added a few shortcut options.
<li>Added the possibility to feed options through the config file.
</ul>
<tr><td valign=top>1.50<td><ul>
<li>Added support for multiple character sets for the entity
    references.
<li>Redefined options, options are now case-sensitive too.
<li>Optionally get rid of the `-=' and `=-' from the title.
<li>Added customisability of displaying input, image and link tags.
<li>Added possibility to specify an output path.
<li>Added support for single and double quote for string enclosing within tags.
<li>Added many new tags from HTML 4.0 Specification.
<li>Re-wrote the larger part of this documentation.
<li>Fixed a couple of bugs in generating warnings.
<li>Fixed a bug in expanding wildcards. It doesn't expand directories anymore.
<li>Many smaller bugs fixed.
<li>Many small cosmetic changes.
<li>Included LONGFILE.BTM.
<li>Added support for list files.
<li>Now word delimiters besides spaces and tabs and newlines, etc can be
    defined.
<li>Added borders for tables and implemented the colspan attribute.
<li>The entity references in tag attributes will be converted.
</ul>
<tr><td valign=top>1.21.<td><ul>
<li>Redirection of input from standard input, is the default when no
    filename was specified instead of an error.
<li>Added performing of underlines.
<li>fixed a bug in reading a tag.
</ul>
<tr><td valign=top>1.20<td><ul>
<li>Bugs fixed and internal revisions.
<li>Table reformatting improved (no more garbage output).
<li>Multiple file specifications on commandline.
</ul>
<tr><td valign=top>1.10<td><ul>
<li>Fixed some bugs.
<li>Improved commandline options parsing.
</ul>
<tr><td valign=top>1.02<td><ul>
<li>Added formatting of tables.
<li>Better processing of user input (forms).
<li>Line wrapping added internally (WORDWRAP.EXE is not necessary anymore).
<li>Option added to set line wrap.
<li>WORDWRAP package not included anymore.
<li>Amp sequences of the format &amp;#nnn; can now be defined, but can
    be ignored.
<li>A very nasty bug fixed which corrupted the heap.
<li>HTML warnings optional.
<li>Added and removed commandline options.
</ul>
<tr><td valign=top>1.01<td><ul>
<li>Fixed a nasty bug, when outputting to STDOUT, the number of errors
    was displayed before the last text.
<li>More intelligent algorithm for performing simple text.
<li>Added value and type options to &lt;LI&gt; tag.
<li>Added option for title.
<li>Decreased default value for stack and tag size.
<li>Documentation converted to HTML format.</ul>
<tr><td>1.00<td><ul><li>First version, not released</ul>
</table><p>
<li>How to reach the author?<p>

Write email to:<br>
<a href="mailto:wieger1@bart.nl"><address>wieger1@bart.nl</address></a><br>
or<br>
<a href="mailto:H.A.Schotanus@cs.utwente.nl"><address>H.A.Schotanus@cs.utwente.nl</address></a><p>

Write to:<br>
Gavin Spearhead<br>
Witbreuksweg 387-302<br>
7522 ZA Enschede<br>
The Netherlands<P>

Note that previous email address (wieger@epsilon.nl and wieger1@noord.bart.nl) are
still valid.<p>

This the latest version of this file can be found at <a href="http://www.noord.bart.nl/~wieger1/html2txt.htm">
http://www.noord.bart.nl/~wieger1/html2txt.htm</a>.
</ol>
<hr size=1>
Note 1: Anywhere I say Netscape, I mean browser ;-)<p>
Greetings,<br>
Gavin<br>
</body>
</html>
